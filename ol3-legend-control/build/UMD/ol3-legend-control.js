// Generated by uRequire v0.7.0-beta.11 target: 'UMD' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, exports, require('openLayers'), require('jquery'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'exports', 'openLayers', 'jquery'], factory) } else {
var modNameVars = {'exports': ["exports"],'openLayers': ["ol"],'jquery': ["$"]},
  require = function(modyle) {
    if (modNameVars[modyle])
      for (var _i = 0; _i < modNameVars[modyle].length; _i++)
        if (window.hasOwnProperty(modNameVars[modyle][_i]))
          return window[modNameVars[modyle][_i]];

    var msg = "uRequire: Running UMD module as plain <script>, failed to `require('" + modyle + "')`:";
    if (modNameVars[modyle] && modNameVars[modyle].length)
      msg = msg + "it`s not exported on `window` as any of these vars: " + JSON.stringify(modNameVars[modyle]);
    else
      msg = msg + "WITHOUT an AMD or CommonJS loader & " +
        "no identifier (i.e varName or param name) associated with dependency '"+modyle+"' in the bundle of 'ol3-legend-control'.";

    throw new Error(msg);
  }, exports = {}, module = {exports: exports};
factory(require, exports, module, exports, ol, $);
}
}).call(this, function (require, exports, module, exports, ol, $) {
  

var ol3Contrib;
  (function (ol3Contrib) {
    var controls;
    (function (controls) {
      var LegendControl = function (_super) {
        __extends(LegendControl, _super);
        function LegendControl(opt_options) {
          var _this = this;
          _super.call(this, {
            element: this.createElement(),
            target: opt_options.target
          });
          this.maxValue = Number.MIN_VALUE;
          this.minValue = Number.MAX_VALUE;
          this.options = opt_options;
          this.options.steps.forEach(function (step) {
            if (step.value < _this.minValue)
              _this.minValue = step.value;
            if (step.value > _this.maxValue)
              _this.maxValue = step.value;
            if (typeof step.showMarker === "undefined")
              step.showMarker = true;
          });
        }
        LegendControl.prototype.createElement = function () {
          this.element = document.createElement("div");
          this.element.setAttribute("class", "ol-legend ol-control");
          return this.element;
        };
        LegendControl.prototype.setMap = function (map) {
          var _this = this;
          ol.control.Control.prototype.setMap.call(this, map);
          console.log($(this.element).innerHeight());
          this.legendCanvas = document.createElement("canvas");
          this.element.appendChild(this.legendCanvas);
          this.legendCanvas.width = this.legendCanvas.offsetWidth;
          this.legendCanvas.height = this.options.gradientHeight || this.legendCanvas.offsetHeight;
          var ctx = this.legendCanvas.getContext("2d");
          ctx.font = "16px Georgia";
          var gradientWidth = this.options.gradientWidth || 20;
          var gradientOffset = 10;
          var gradientHeight = this.legendCanvas.height - gradientOffset * 2;
          var left = false;
          var maxSize = Number.MIN_VALUE;
          var lingrad = ctx.createLinearGradient(0, 0, 0, gradientHeight);
          this.options.steps.forEach(function (step) {
            var pos = 1 - step.value / (_this.maxValue - _this.minValue);
            lingrad.addColorStop(pos, step.color);
            if (step.showMarker) {
              ctx.beginPath();
              ctx.moveTo(gradientOffset + (left ? 0 : gradientWidth), gradientOffset + pos * gradientHeight);
              ctx.lineTo(gradientOffset + (left ? 0 : gradientWidth) + (left ? -10 : 10), gradientOffset + pos * gradientHeight);
              ctx.stroke();
              var text = step.text || step.value.toString();
              if (text.length > maxSize)
                maxSize = text.length;
              ctx.fillText(text, gradientOffset + (left ? 0 : gradientWidth) + (left ? -10 : 10) + 2, gradientOffset + pos * gradientHeight + 4);
            }
          });
          ctx.fillStyle = lingrad;
          ctx.lineWidth = 1;
          ctx.strokeStyle = "black";
          ctx.fillRect(gradientOffset, gradientOffset, gradientWidth, gradientHeight);
          ctx.strokeRect(gradientOffset, gradientOffset, gradientWidth, gradientHeight);
          this.element.style.width = gradientWidth + 2 * gradientOffset + 10 + maxSize * 8 + "px";
          this.element.style.height = gradientHeight + 2 * gradientOffset + "px";
        };
        return LegendControl;
      }(ol.control.Control);
      controls.LegendControl = LegendControl;
    }(controls = ol3Contrib.controls || (ol3Contrib.controls = {})));
  }(ol3Contrib || (ol3Contrib = {})));
  return ol3Contrib;


})
}).call(this)